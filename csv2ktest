#!/usr/bin/env python

import os
import struct
import sys
import csv
import shlex

version_no=3

class KTestError(Exception):
    pass

class KTest:
    @staticmethod
    def fromfile(path):
        if not os.path.exists(path):
            print "ERROR: file %s not found" % (path)
            sys.exit(1)
            
        f = open(path,'rb')
        hdr = f.read(5)
        if len(hdr)!=5 or (hdr!='KTEST' and hdr != "BOUT\n"):
            raise KTestError,'unrecognized file'
        version, = struct.unpack('>i', f.read(4))
        if version > version_no:
            raise KTestError,'unrecognized version'
        numArgs, = struct.unpack('>i', f.read(4))
        args = []
        for i in range(numArgs):
            size, = struct.unpack('>i', f.read(4))
            args.append(f.read(size))
            
        if version >= 2:
            symArgvs, = struct.unpack('>i', f.read(4))
            symArgvLen, = struct.unpack('>i', f.read(4))
        else:
            symArgvs = 0
            symArgvLen = 0

        numObjects, = struct.unpack('>i', f.read(4))
        objects = []
        for i in range(numObjects):
            size, = struct.unpack('>i', f.read(4))
            name = f.read(size)
            size, = struct.unpack('>i', f.read(4))
            bytes = f.read(size)
            objects.append( (name,bytes) )

        # Create an instance
        b = KTest(version, args, symArgvs, symArgvLen, objects)
        # Augment with extra filename field
        b.filename = path
        return b
    
    def tostream(self, out):
        out.write('KTEST') # hdr
        out.write(struct.pack('>i', self.version)) # version
        out.write(struct.pack('>i', len(self.args))) # numArgs
        for arg in self.args:
            out.write(struct.pack('>i', len(arg))) # size
            out.write(arg) # args
        if self.version >= 2:
            out.write(struct.pack('>i', self.symArgvs)) # symArgvs
            out.write(struct.pack('>i', self.symArgvLen)) # symArgvLen
        out.write(struct.pack('>i', len(self.objects))) # numObjects
        for name,bytes in self.objects:
            out.write(struct.pack('>i', len(name))) # size
            out.write(name) # name
            out.write(struct.pack('>i', len(bytes))) # size
            out.write(bytes) # bytes

    def __init__(self, version, args, symArgvs, symArgvLen, objects):
        self.version = version
        self.symArgvs = symArgvs
        self.symArgvLen = symArgvLen
        self.args = args
        self.objects = objects

        # add a field that represents the name of the program used to
        # generate this .ktest file:
        program_full_path = self.args[0]
        program_name = os.path.basename(program_full_path)
        # sometimes program names end in .bc, so strip them
        if program_name.endswith('.bc'):
          program_name = program_name[:-3]
        self.programName = program_name
        
def trimZeros(str):
    for i in range(len(str))[::-1]:
        if str[i] != '\x00':
            return str[:i+1]
    return ''
    
def emitTest(filename, test_num, ktestArgs, data):
    f = open('tests/'+filename+'.'+str(test_num)+'.from_csv.ktest', 'wb')
    ktestArgsParsed = shlex.split(ktestArgs)
    test = KTest(3, ktestArgsParsed, 0, 0, data)
    test.tostream(f)

def usage():
    print 'Usage: csv2ktest --args "cmd_under_test --any-args" file1.csv file2.csv...'

def main(args):
    args.pop(0) # throw out "csv2ktest.py"
    if (args == ['--help'] or args == ['-h'] or args == []):
        usage()
        return 1
    if (args.pop(0) != '--args'):
        usage()
        return 2
    ktestArgs = args.pop(0)
    for file in args:
        basename, _ = os.path.splitext(file)
        # Open the file
        f = open(file, 'rb')
        reader = csv.reader(f)
        # The first row contains var names
        var_names = reader.next()
        # Inputs are all before the entry for ___t___
        time_index = var_names.index('___t___')
        test_num = 0
        current_data = []
        for row in reader:
            if (row == []):
                 # This test is all done.
                 emitTest(basename, test_num, ktestArgs, current_data)
                 test_num += 1
                 current_data = []
            else:
                # Collect data for this row
                for i in range(0, time_index):
                    # We're just calling everything a bool for now :P
                    # Split commas (if any), pack it using struct, and join it
                    # all back together.
                    data = ''.join(
                           map( (lambda v: struct.pack('>?', int(v))), 
                                row[i].split(',')))
                    current_data.append( (var_names[i], data) )
        # Emit the final test
        # Actually, turns out Reactis always ends with a newline, so we're fine.
        #emitTest(basename, test_num, current_data)

if __name__=='__main__':
    main(sys.argv)
